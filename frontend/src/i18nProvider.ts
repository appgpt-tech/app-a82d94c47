//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';
import grOriginal from 'ra-language-greek';

const enResources = {
  resources: {
    Products: {
      name: 'Products',
      fields: {
        perfumeName: 'Perfume Name',
        placeholderPicture: 'Placeholder Picture',
        price: 'Price',
        description: 'Description',
        id: 'id',
      },
    },
    Productcategories: {
      name: 'Product Categories',
      fields: {
        categoryName: 'Category Name',
        description: 'Description',
        id: 'id',
      },
    },
    Customers: {
      name: 'Customers',
      fields: {
        name: 'Name',
        phoneWhatsappNumber: 'Phone Whatsapp Number',
        addressLine1: 'Address Line1',
        addressLine2: 'Address Line2',
        city: 'City',
        comments: 'Comments',
        id: 'id',
      },
    },
    Productstock: {
      name: 'Product Stock',
      fields: {
        product: 'Product',
        quantity: 'Quantity',
        restockDate: 'Restock Date',
        id: 'id',
      },
    },
    Consumablesstock: {
      name: 'Consumables Stock',
      fields: {
        consumableName: 'Consumable Name',
        quantity: 'Quantity',
        restockDate: 'Restock Date',
        vendor: 'Vendor',
        rate: 'Rate',
        id: 'id',
      },
    },
    Reviews: {
      name: 'Reviews',
      fields: {
        product: 'Product',
        customer: 'Customer',
        rating: 'Rating',
        reviewText: 'Review Text',
        date: 'Date',
        id: 'id',
      },
    },
    Vendors: {
      name: 'Vendors',
      fields: {
        whatsappnumber: 'Whatsappnumber',
        vendorrating: 'Vendorrating',
        id: 'id',
      },
    },
    Discounts: {
      name: 'Discounts',
      fields: {
        product: 'Product',
        discountType: 'Discount Type',
        description: 'Description',
        discountAmount: 'Discount Amount',
        discountPercent: 'Discount Percent',
        startDate: 'Start Date',
        endDate: 'End Date',
        id: 'id',
      },
    },
    Overheads: {
      name: 'Overheads',
      fields: {
        overheadType: 'Overhead Type',
        description: 'Description',
        amount: 'Amount',
        date: 'Date',
        id: 'id',
      },
    },
    Shippingexpenses: {
      name: 'Shipping Expenses',
      fields: {
        order: 'Order',
        customerTown: 'Customer Town',
        shippingProvider: 'Shipping Provider',
        cost: 'Cost',
        date: 'Date',
        id: 'id',
      },
    },
    Returnedorders: {
      name: 'Returned Orders',
      fields: {
        order: 'Order',
        product: 'Product',
        reasonForReturn: 'Reason For Return',
        date: 'Date',
        status: 'Status',
        recoverable: 'Recoverable',
        totalLoss: 'Total Loss',
        recoveryCost: 'Recovery Cost',
        id: 'id',
      },
    },
    Whatsappchat: {
      name: 'Whatsapp Chat',
      fields: {
        customer: 'Customer',
        message: 'Message',
        dateTime: 'Date Time',
        status: 'Status',
        id: 'id',
      },
    },
  },
};
const frResources = {
  resources: {
    Products: {
      name: 'Products (fr)',
      fields: {
        perfumeName: 'Perfume Name (fr)',
        placeholderPicture: 'Placeholder Picture (fr)',
        price: 'Price (fr)',
        description: 'Description (fr)',
        id: 'id',
      },
    },
    Productcategories: {
      name: 'Product Categories (fr)',
      fields: {
        categoryName: 'Category Name (fr)',
        description: 'Description (fr)',
        id: 'id',
      },
    },
    Customers: {
      name: 'Customers (fr)',
      fields: {
        name: 'Name (fr)',
        phoneWhatsappNumber: 'Phone Whatsapp Number (fr)',
        addressLine1: 'Address Line1 (fr)',
        addressLine2: 'Address Line2 (fr)',
        city: 'City (fr)',
        comments: 'Comments (fr)',
        id: 'id',
      },
    },
    Productstock: {
      name: 'Product Stock (fr)',
      fields: {
        product: 'Product (fr)',
        quantity: 'Quantity (fr)',
        restockDate: 'Restock Date (fr)',
        id: 'id',
      },
    },
    Consumablesstock: {
      name: 'Consumables Stock (fr)',
      fields: {
        consumableName: 'Consumable Name (fr)',
        quantity: 'Quantity (fr)',
        restockDate: 'Restock Date (fr)',
        vendor: 'Vendor (fr)',
        rate: 'Rate (fr)',
        id: 'id',
      },
    },
    Reviews: {
      name: 'Reviews (fr)',
      fields: {
        product: 'Product (fr)',
        customer: 'Customer (fr)',
        rating: 'Rating (fr)',
        reviewText: 'Review Text (fr)',
        date: 'Date (fr)',
        id: 'id',
      },
    },
    Vendors: {
      name: 'Vendors (fr)',
      fields: {
        whatsappnumber: 'Whatsappnumber (fr)',
        vendorrating: 'Vendorrating (fr)',
        id: 'id',
      },
    },
    Discounts: {
      name: 'Discounts (fr)',
      fields: {
        product: 'Product (fr)',
        discountType: 'Discount Type (fr)',
        description: 'Description (fr)',
        discountAmount: 'Discount Amount (fr)',
        discountPercent: 'Discount Percent (fr)',
        startDate: 'Start Date (fr)',
        endDate: 'End Date (fr)',
        id: 'id',
      },
    },
    Overheads: {
      name: 'Overheads (fr)',
      fields: {
        overheadType: 'Overhead Type (fr)',
        description: 'Description (fr)',
        amount: 'Amount (fr)',
        date: 'Date (fr)',
        id: 'id',
      },
    },
    Shippingexpenses: {
      name: 'Shipping Expenses (fr)',
      fields: {
        order: 'Order (fr)',
        customerTown: 'Customer Town (fr)',
        shippingProvider: 'Shipping Provider (fr)',
        cost: 'Cost (fr)',
        date: 'Date (fr)',
        id: 'id',
      },
    },
    Returnedorders: {
      name: 'Returned Orders (fr)',
      fields: {
        order: 'Order (fr)',
        product: 'Product (fr)',
        reasonForReturn: 'Reason For Return (fr)',
        date: 'Date (fr)',
        status: 'Status (fr)',
        recoverable: 'Recoverable (fr)',
        totalLoss: 'Total Loss (fr)',
        recoveryCost: 'Recovery Cost (fr)',
        id: 'id',
      },
    },
    Whatsappchat: {
      name: 'Whatsapp Chat (fr)',
      fields: {
        customer: 'Customer (fr)',
        message: 'Message (fr)',
        dateTime: 'Date Time (fr)',
        status: 'Status (fr)',
        id: 'id',
      },
    },
  },
};
const grResources = {
  resources: {
    Products: {
      name: 'Products (gr)',
      fields: {
        perfumeName: 'Perfume Name (gr)',
        placeholderPicture: 'Placeholder Picture (gr)',
        price: 'Price (gr)',
        description: 'Description (gr)',
        id: 'id',
      },
    },
    Productcategories: {
      name: 'Product Categories (gr)',
      fields: {
        categoryName: 'Category Name (gr)',
        description: 'Description (gr)',
        id: 'id',
      },
    },
    Customers: {
      name: 'Customers (gr)',
      fields: {
        name: 'Name (gr)',
        phoneWhatsappNumber: 'Phone Whatsapp Number (gr)',
        addressLine1: 'Address Line1 (gr)',
        addressLine2: 'Address Line2 (gr)',
        city: 'City (gr)',
        comments: 'Comments (gr)',
        id: 'id',
      },
    },
    Productstock: {
      name: 'Product Stock (gr)',
      fields: {
        product: 'Product (gr)',
        quantity: 'Quantity (gr)',
        restockDate: 'Restock Date (gr)',
        id: 'id',
      },
    },
    Consumablesstock: {
      name: 'Consumables Stock (gr)',
      fields: {
        consumableName: 'Consumable Name (gr)',
        quantity: 'Quantity (gr)',
        restockDate: 'Restock Date (gr)',
        vendor: 'Vendor (gr)',
        rate: 'Rate (gr)',
        id: 'id',
      },
    },
    Reviews: {
      name: 'Reviews (gr)',
      fields: {
        product: 'Product (gr)',
        customer: 'Customer (gr)',
        rating: 'Rating (gr)',
        reviewText: 'Review Text (gr)',
        date: 'Date (gr)',
        id: 'id',
      },
    },
    Vendors: {
      name: 'Vendors (gr)',
      fields: {
        whatsappnumber: 'Whatsappnumber (gr)',
        vendorrating: 'Vendorrating (gr)',
        id: 'id',
      },
    },
    Discounts: {
      name: 'Discounts (gr)',
      fields: {
        product: 'Product (gr)',
        discountType: 'Discount Type (gr)',
        description: 'Description (gr)',
        discountAmount: 'Discount Amount (gr)',
        discountPercent: 'Discount Percent (gr)',
        startDate: 'Start Date (gr)',
        endDate: 'End Date (gr)',
        id: 'id',
      },
    },
    Overheads: {
      name: 'Overheads (gr)',
      fields: {
        overheadType: 'Overhead Type (gr)',
        description: 'Description (gr)',
        amount: 'Amount (gr)',
        date: 'Date (gr)',
        id: 'id',
      },
    },
    Shippingexpenses: {
      name: 'Shipping Expenses (gr)',
      fields: {
        order: 'Order (gr)',
        customerTown: 'Customer Town (gr)',
        shippingProvider: 'Shipping Provider (gr)',
        cost: 'Cost (gr)',
        date: 'Date (gr)',
        id: 'id',
      },
    },
    Returnedorders: {
      name: 'Returned Orders (gr)',
      fields: {
        order: 'Order (gr)',
        product: 'Product (gr)',
        reasonForReturn: 'Reason For Return (gr)',
        date: 'Date (gr)',
        status: 'Status (gr)',
        recoverable: 'Recoverable (gr)',
        totalLoss: 'Total Loss (gr)',
        recoveryCost: 'Recovery Cost (gr)',
        id: 'id',
      },
    },
    Whatsappchat: {
      name: 'Whatsapp Chat (gr)',
      fields: {
        customer: 'Customer (gr)',
        message: 'Message (gr)',
        dateTime: 'Date Time (gr)',
        status: 'Status (gr)',
        id: 'id',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);
const gr = mergeTranslations(grOriginal, grResources);

const translations = { en, fr, gr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Français' },
    { locale: 'gr', name: 'Ελληνικά' },
  ],
);
